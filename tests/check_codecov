#! /bin/bash
# Disclaimer of Warranties.
# A. YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT, TO THE EXTENT PERMITTED BY
#    APPLICABLE LAW, USE OF THIS SHELL SCRIPT AND ANY SERVICES PERFORMED
#    BY OR ACCESSED THROUGH THIS SHELL SCRIPT IS AT YOUR SOLE RISK AND
#    THAT THE ENTIRE RISK AS TO SATISFACTORY QUALITY, PERFORMANCE, ACCURACY AND
#    EFFORT IS WITH YOU.
#
# B. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SHELL SCRIPT
#    AND SERVICES ARE PROVIDED "AS IS" AND “AS AVAILABLE”, WITH ALL FAULTS AND
#    WITHOUT WARRANTY OF ANY KIND, AND THE AUTHOR OF THIS SHELL SCRIPT'S LICENSORS
#    (COLLECTIVELY REFERRED TO AS "THE AUTHOR" FOR THE PURPOSES OF THIS DISCLAIMER)
#    HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH RESPECT TO THIS SHELL SCRIPT
#    SOFTWARE AND SERVICES, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
#    NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF
#    MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE,
#    ACCURACY, QUIET ENJOYMENT, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# C. THE AUTHOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE
#    THE AUTHOR's SOFTWARE AND SERVICES, THAT THE FUNCTIONS CONTAINED IN, OR
#    SERVICES PERFORMED OR PROVIDED BY, THIS SHELL SCRIPT WILL MEET YOUR
#    REQUIREMENTS, THAT THE OPERATION OF THIS SHELL SCRIPT OR SERVICES WILL
#    BE UNINTERRUPTED OR ERROR-FREE, THAT ANY SERVICES WILL CONTINUE TO BE MADE
#    AVAILABLE, THAT THIS SHELL SCRIPT OR SERVICES WILL BE COMPATIBLE OR
#    WORK WITH ANY THIRD PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES,
#    OR THAT DEFECTS IN THIS SHELL SCRIPT OR SERVICES WILL BE CORRECTED.
#    INSTALLATION OF THIS THE AUTHOR SOFTWARE MAY AFFECT THE USABILITY OF THIRD
#    PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES.
#
# D. YOU FURTHER ACKNOWLEDGE THAT THIS SHELL SCRIPT AND SERVICES ARE NOT
#    INTENDED OR SUITABLE FOR USE IN SITUATIONS OR ENVIRONMENTS WHERE THE FAILURE
#    OR TIME DELAYS OF, OR ERRORS OR INACCURACIES IN, THE CONTENT, DATA OR
#    INFORMATION PROVIDED BY THIS SHELL SCRIPT OR SERVICES COULD LEAD TO
#    DEATH, PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE,
#    INCLUDING WITHOUT LIMITATION THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
#    NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, LIFE SUPPORT OR
#    WEAPONS SYSTEMS.
#
# E. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY THE AUTHOR
#    SHALL CREATE A WARRANTY. SHOULD THIS SHELL SCRIPT OR SERVICES PROVE DEFECTIVE,
#    YOU ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#    Limitation of Liability.
# F. TO THE EXTENT NOT PROHIBITED BY APPLICABLE LAW, IN NO EVENT SHALL THE AUTHOR
#    BE LIABLE FOR PERSONAL INJURY, OR ANY INCIDENTAL, SPECIAL, INDIRECT OR
#    CONSEQUENTIAL DAMAGES WHATSOEVER, INCLUDING, WITHOUT LIMITATION, DAMAGES
#    FOR LOSS OF PROFITS, CORRUPTION OR LOSS OF DATA, FAILURE TO TRANSMIT OR
#    RECEIVE ANY DATA OR INFORMATION, BUSINESS INTERRUPTION OR ANY OTHER
#    COMMERCIAL DAMAGES OR LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR
#    INABILITY TO USE THIS SHELL SCRIPT OR SERVICES OR ANY THIRD PARTY
#    SOFTWARE OR APPLICATIONS IN CONJUNCTION WITH THIS SHELL SCRIPT OR
#    SERVICES, HOWEVER CAUSED, REGARDLESS OF THE THEORY OF LIABILITY (CONTRACT,
#    TORT OR OTHERWISE) AND EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION
#    OR LIMITATION OF LIABILITY FOR PERSONAL INJURY, OR OF INCIDENTAL OR
#    CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event
#    shall THE AUTHOR's total liability to you for all damages (other than as may
#    be required by applicable law in cases involving personal injury) exceed
#    the amount of five dollars ($5.00). The foregoing limitations will apply
#    even if the above stated remedy fails of its essential purpose.
################################################################################

ulimit -t 1200
PATH="/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:${PATH}"
# shellcheck disable=SC2086
LANG=${LANG:-"en_US"}
LC_ALL="${LANG:0:5}.utf-8"
umask 127

LOCK_FILE="${TMPDIR:-/tmp}/codecov_test_script_lock"
EXIT_CODE=0

# Function to check if a command exists.

# USAGE:
#  ~$ check_command CMD
# Arguments:
# CMD (Required) -- Name of the command to check
# Results:
#    exits 64 -- missing required argument
#    exits 126 -- check complete and has failed, can not find given command.
#    returns successful -- check complete and command found to be executable.
function check_command() {
    test -z "$1" && { printf "%s\n" "Error: command name is required to check for existence." >&2 ; exit 64 ; } ;
    local cmd="$1" ;
    # shellcheck disable=SC2086
    test -x "$(command -v ${cmd})" || { printf "%s\n" "Error: Required command '$cmd' is not found." >&2 ; exit 126 ; } ;
}  # end check_command()
# propagate/export function to sub-shells
export -f check_command

# Set up CEP-5 shlock helper
hash -p ./.github/tool_shlock_helper.sh shlock || { printf "%s\n" "Error: Failed to register shlock helper. CEP-5 locking will not work." >&2 ; exit 78 ; } ;

# Check required commands
check_command grep ;
check_command curl ;
check_command gpgv ;
check_command shasum ;
check_command shlock ;

# Detect the operating system
case "$( command uname -s )" in
	*arwin)
		CI_OS="macos"
		;;
	Linux)
		CI_OS="linux"
		;;
	*)
		# assume windows
		printf 'Unsupported OS\n' >&2 ;
		CI_OS="windows"
		;;
esac


function cleanup() {
	# shellcheck disable=SC2317
	rm -f "${LOCK_FILE}" 2>/dev/null || true ;
	# shellcheck disable=SC2317
	wait ;
	# shellcheck disable=SC2317
	rm -f ./codecov 2>/dev/null || true ;
	# shellcheck disable=SC2317
	wait ;
	# shellcheck disable=SC2317
	hash -d shlock 2>/dev/null > /dev/null || true ;
}

if [[ ( $(shlock -f "${LOCK_FILE}" -p $$ ) -eq 0 ) ]] ; then
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 129 ;' SIGHUP || EXIT_CODE=129
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 143 ;' SIGTERM || EXIT_CODE=143
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 131 ;' SIGQUIT || EXIT_CODE=131
		# SC2173 - https://github.com/koalaman/shellcheck/wiki/SC2173
		#trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null > /dev/null || true ; wait ; exit 1 ;' SIGSTOP || EXIT_CODE=7
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 130 ;' SIGINT || EXIT_CODE=130
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true || true ; wait ; exit 137 ;' SIGABRT || EXIT_CODE=137
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit ${EXIT_CODE} ;' EXIT || EXIT_CODE=1
		# shellcheck disable=SC2086
		trap 'cleanup ; wait ; exit ${EXIT_CODE} ;' EXIT || EXIT_CODE=1
else
		# shellcheck disable=SC2046
		printf "%s\n" "CodeCov already in progress by "$(head "${LOCK_FILE}") >&2 ;
		false ;
		exit 126 ;
fi

# this is how test files are found:

# THIS IS THE ACTUAL GIT DIR USED (update _TEST_ROOT_DIR as needed)
if _TEST_ROOT_DIR=$(git rev-parse --show-superproject-working-tree 2>/dev/null); then
	if [ -z "${_TEST_ROOT_DIR}" ]; then
		_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
	fi
else
	printf "\t%s\n" "FAIL: missing valid repository or source structure" >&2
	EXIT_CODE=40
fi

#########################
# actual Work starts here
#########################

if [[ ( -r ./codecov.yml ) ]] ; then
	curl -X POST --data-binary @- https://codecov.io/validate <codecov.yml 2>/dev/null || EXIT_CODE=6
fi
if [[ ( -r ./.codecov.yml ) ]] ; then
	curl -X POST --data-binary @- https://codecov.io/validate <./.codecov.yml 2>/dev/null || EXIT_CODE=6
fi


if [[ "${CI_OS:-Other}" == "Linux" ]] && [[ ( ${EXIT_CODE} -eq 0 ) ]] && [[ ( ${CI_CODECOV_UPLOAD_ENABLED:-0} -eq 1 ) ]] ; then
	curl -fLso codecov "https://uploader.codecov.io/latest/${CI_OS:-linux}/codecov" || EXIT_CODE=126 ;
	for i in 1 256 512 ; do
		curl -fLso "codecov.SHA${i}SUM" "https://uploader.codecov.io/latest/${CI_OS:-linux}/codecov.SHA${i}SUM" ; wait ;
		curl -fLso "codecov.SHA${i}SUM.sig" "https://uploader.codecov.io/latest/${CI_OS:-linux}/codecov.SHA${i}SUM.sig" ; wait ;
		# test sha1/sha512 signatures if found and sha256 even if not found
		if [[ ( -r "codecov.SHA${i}SUM" ) ]] || [[ ( ${i} -eq 256 ) ]] ; then
			if [[ ( -r "codecov.SHA${i}SUM.sig" ) ]] ; then
				# configure your CI evironment to trust the key at https://keybase.io/codecovsecurity/pgp_keys.asc
				# FP: 2703 4E7F DB85 0E0B BC2C 62FF 806B B28A ED77 9869
				# OR...
				# Set CI=true to continue on missing keys
				gpgv "codecov.SHA${i}SUM.sig" "codecov.SHA${i}SUM" || ${CI} || EXIT_CODE=126
				rm -vf "codecov.SHA${i}SUM.sig" 2>/dev/null ;
			fi
			shasum -a $i -c --ignore-missing "codecov.SHA${i}SUM" || EXIT_CODE=126
			rm -vf "codecov.SHA${i}SUM" 2>/dev/null ;
		fi
	done

	# shellcheck disable=SC2086
	if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
		chmod 751 ./codecov || EXIT_CODE=126
	fi

	# shellcheck disable=SC2086
	if [[ ( ${EXIT_CODE} -eq 0 ) ]] ; then
		./codecov --help
		#./codecov upload-coverage -n "Custom Test Run" -X gcov --flag multicast --git-service github --sha ${VCS_COMMIT_ID} --dir . --file ./test-reports/coverage.xml -Z || EXIT_CODE=10 ;
	fi

	rm -f ./codecov 2>/dev/null > /dev/null || true ; wait ;

fi ;  # end if linux

unset _TEST_ROOT_DIR 2>/dev/null || true ;

rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ;

# shellcheck disable=SC2086
exit ${EXIT_CODE:-255} ;
