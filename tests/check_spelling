#! /bin/bash
# Disclaimer of Warranties.
# A. YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT, TO THE EXTENT PERMITTED BY
#    APPLICABLE LAW, USE OF THIS SHELL SCRIPT AND ANY SERVICES PERFORMED
#    BY OR ACCESSED THROUGH THIS SHELL SCRIPT IS AT YOUR SOLE RISK AND
#    THAT THE ENTIRE RISK AS TO SATISFACTORY QUALITY, PERFORMANCE, ACCURACY AND
#    EFFORT IS WITH YOU.
#
# B. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SHELL SCRIPT
#    AND SERVICES ARE PROVIDED "AS IS" AND "AS AVAILABLE", WITH ALL FAULTS AND
#    WITHOUT WARRANTY OF ANY KIND, AND THE AUTHOR OF THIS SHELL SCRIPT'S LICENSORS
#    (COLLECTIVELY REFERRED TO AS "THE AUTHOR" FOR THE PURPOSES OF THIS DISCLAIMER)
#    HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH RESPECT TO THIS SHELL SCRIPT
#    SOFTWARE AND SERVICES, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
#    NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF
#    MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE,
#    ACCURACY, QUIET ENJOYMENT, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# C. THE AUTHOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE
#    THE AUTHOR's SOFTWARE AND SERVICES, THAT THE FUNCTIONS CONTAINED IN, OR
#    SERVICES PERFORMED OR PROVIDED BY, THIS SHELL SCRIPT WILL MEET YOUR
#    REQUIREMENTS, THAT THE OPERATION OF THIS SHELL SCRIPT OR SERVICES WILL
#    BE UNINTERRUPTED OR ERROR-FREE, THAT ANY SERVICES WILL CONTINUE TO BE MADE
#    AVAILABLE, THAT THIS SHELL SCRIPT OR SERVICES WILL BE COMPATIBLE OR
#    WORK WITH ANY THIRD PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES,
#    OR THAT DEFECTS IN THIS SHELL SCRIPT OR SERVICES WILL BE CORRECTED.
#    INSTALLATION OF THIS THE AUTHOR SOFTWARE MAY AFFECT THE USABILITY OF THIRD
#    PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES.
#
# D. YOU FURTHER ACKNOWLEDGE THAT THIS SHELL SCRIPT AND SERVICES ARE NOT
#    INTENDED OR SUITABLE FOR USE IN SITUATIONS OR ENVIRONMENTS WHERE THE FAILURE
#    OR TIME DELAYS OF, OR ERRORS OR INACCURACIES IN, THE CONTENT, DATA OR
#    INFORMATION PROVIDED BY THIS SHELL SCRIPT OR SERVICES COULD LEAD TO
#    DEATH, PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE,
#    INCLUDING WITHOUT LIMITATION THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
#    NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, LIFE SUPPORT OR
#    WEAPONS SYSTEMS.
#
# E. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY THE AUTHOR
#    SHALL CREATE A WARRANTY. SHOULD THIS SHELL SCRIPT OR SERVICES PROVE DEFECTIVE,
#    YOU ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#    Limitation of Liability.
# F. TO THE EXTENT NOT PROHIBITED BY APPLICABLE LAW, IN NO EVENT SHALL THE AUTHOR
#    BE LIABLE FOR PERSONAL INJURY, OR ANY INCIDENTAL, SPECIAL, INDIRECT OR
#    CONSEQUENTIAL DAMAGES WHATSOEVER, INCLUDING, WITHOUT LIMITATION, DAMAGES
#    FOR LOSS OF PROFITS, CORRUPTION OR LOSS OF DATA, FAILURE TO TRANSMIT OR
#    RECEIVE ANY DATA OR INFORMATION, BUSINESS INTERRUPTION OR ANY OTHER
#    COMMERCIAL DAMAGES OR LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR
#    INABILITY TO USE THIS SHELL SCRIPT OR SERVICES OR ANY THIRD PARTY
#    SOFTWARE OR APPLICATIONS IN CONJUNCTION WITH THIS SHELL SCRIPT OR
#    SERVICES, HOWEVER CAUSED, REGARDLESS OF THE THEORY OF LIABILITY (CONTRACT,
#    TORT OR OTHERWISE) AND EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION
#    OR LIMITATION OF LIABILITY FOR PERSONAL INJURY, OR OF INCIDENTAL OR
#    CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event
#    shall THE AUTHOR's total liability to you for all damages (other than as may
#    be required by applicable law in cases involving personal injury) exceed
#    the amount of five dollars ($5.00). The foregoing limitations will apply
#    even if the above stated remedy fails of its essential purpose.
################################################################################
#
# This script attempts to enforce spell-checking if the codespell tool is available.
# It accomplishes the following tasks:
# 1. Sets up error handling and cleanup mechanisms to ensure proper execution.
# 2. Determines the test root directory based on the project structure.
# 3. lint and check spelling
# 4. cleanup and report
#
# Usage Summary:
# To lint the project without making changes:
# ./tests/check_spelling
# To lint and auto-correct spelling errors:
# ./tests/check_spelling --fix
#
# Exit Code Summary:
# The script uses the EXIT_CODE variable to track exit conditions:
# -   0: Successful execution.
# -   1: General failure.
# -   2: Coverage combine or XML generation failed.
# -   3: git ls-tree command failed.
# -  40: Missing valid repository or source structure.
# - 126: Script already in progress or command not executable.
# - 129: Received SIGHUP signal.
# - 130: Received SIGINT signal (Ctrl+C).
# - 131: Received SIGQUIT signal.
# - 137: Received SIGABRT signal.
# - 143: Received SIGTERM signal.
#
# The primary goal is to allow linter like spell-checking.

ulimit -t 600
# setting the path may break brain-dead CI that uses crazy paths
# PATH="/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
umask 137

# force utf-8 for spelling
LC_CTYPE="${LC_CTYPE:-en_US.UTF-8}"
export LC_CTYPE
LOCK_FILE="${TMPDIR:-/tmp}/org.pak.multicast.spell-check-shell"
EXIT_CODE=1

# Function to check if a command exists.

# USAGE:
#	~$ check_command CMD
# Arguments:
# CMD (Required) -- Name of the command to check
# Results:
#	exits 64 -- missing required argument
#	exits 126 -- check complete and has failed, can not find given command.
#	returns successful -- check complete and command found to be executable.
function check_command() {
	test -z "$1" && { printf "%s\n" "Error: command name is required to check for existence." >&2 ; exit 64 ; } ;
	local cmd="$1" ;
	# shellcheck disable=SC2086
	test -x "$(command -v ${cmd})" || { printf "%s\n" "Error: Required command '$cmd' is not found." >&2 ; exit 126 ; } ;
}  # end check_command()
# propagate/export function to sub-shells
export -f check_command

# Set up CEP-5 shlock helper
hash -p ./.github/tool_shlock_helper.sh shlock || { printf "%s\n" "Error: Failed to register shlock helper. CEP-5 locking will not work." >&2 ; exit 78 ; } ;

# Check required commands
check_command grep ;
check_command python3 ;
test -x "$(command -v codespell)" || exit 0 ;  # skip quietly if user has not installed GPL2 stuff.
check_command git ;
check_command sed ;
check_command shlock ;


SCRIPT_FILE="tests/check_spelling"

# Set codespell options
CODESPELL_OPTIONS="--quiet-level=4 --builtin clear,rare,code -L assertIn"

# Define specific typos to check for (regression tests)
declare -a SPECIFIC_TYPOS=(
	"RECCOMENDED:RECOMMENDED"
	"succedded:succeeded"
	"ShutdownComandRecived:ShutdownCommandReceived"  # from #224
	"Insanitty:Insanity"  # from #330
	"concatination:concatenation"  # from #330
	"imperitive:imperative"  # from #330
	"sentance:sentence"  # from #330
	"reccomended:recommended"  # from #348
	"absolutly:absolutely"  # from #348
	"specificly:specifically"  # from #205
	"belone:belong"  # from #373
	"subbclass:subclass"  # from #379
	"repostory's:repository's"  # from #384
	"boundry:boundary"  # from #384
	"rappidly:rapidly"  # from #392
	"compleated:completed"  # from #338
	"compleate:complete"  # from #402
	"excutable:executable"  # from #130
	"bassed:based"  # from #415
	"Historicly:Historically"  # from #415
	"selectivly:selectively"  # from #426
	"aoutomaticly:automatically"  # PR #429
	"efectivly:effectively"  # PR #429
)

function cleanup() {
	rm -f "${LOCK_FILE}" 2>/dev/null || : ; wait ;
	# unset when done
	unset SPECIFIC_TYPOS 2>/dev/null || : ;
	unset LOCK_FILE 2>/dev/null || : ;
	hash -d shlock 2>/dev/null || : ;
}

if [[ ( $(shlock -f "${LOCK_FILE}" -p $$ ) -eq 0 ) ]] ; then
		EXIT_CODE=0
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 129 ;' SIGHUP || EXIT_CODE=129
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 143 ;' SIGTERM || EXIT_CODE=143
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 131 ;' SIGQUIT || EXIT_CODE=131
		# SC2173 - https://github.com/koalaman/shellcheck/wiki/SC2173
		#trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 1 ;' SIGSTOP || EXIT_CODE=7
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 130 ;' SIGINT || EXIT_CODE=130
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true || true ; wait ; exit 137 ;' SIGABRT || EXIT_CODE=137
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit ${EXIT_CODE} ;' EXIT || EXIT_CODE=1
else
		# shellcheck disable=SC2046
		printf "\t%s\n" "Check Setup Scripts Tests Coverage already in progress by "$(head "${LOCK_FILE}") >&2 ;
		exit 126 ;
fi

function report_summary() {
	python3 -B .github/tools/cioutput.py --group "Results" ;
	# Improved reporting based on EXIT_CODE
	case "${EXIT_CODE}" in
		0) python3 -B .github/tools/cioutput.py -l info -t "CHECK-SPELLING" "OK: Found no detected spelling errors." ;;
		1) python3 -B .github/tools/cioutput.py -l error --file "${SCRIPT_FILE}" --line ${BASH_LINENO:-0} -t "CHECK-SPELLING" "FAIL: General failure during script execution." >&2 ;;
		3) python3 -B .github/tools/cioutput.py -l error --file "${SCRIPT_FILE}" --line ${BASH_LINENO:-0} -t "CONFIGURATION" "FAIL: Gathering repository's requirements failed." >&2 ;;
		126) python3 -B .github/tools/cioutput.py -l warning --file "${SCRIPT_FILE}" --line ${BASH_LINENO:-0} -t "SKIPPED" "SKIP: Unable to continue script execution." >&2 ;;
		*) python3 -B .github/tools/cioutput.py -l critical --file "${SCRIPT_FILE}" --line ${BASH_LINENO:-0} -t "FAILED" "FAIL: Detected spelling errors." >&2 ;;
	esac
	python3 -B .github/tools/cioutput.py --group ;
}

# this is how test files are found:

# THIS IS THE ACTUAL TEST
_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null) ;
if _TEST_ROOT_DIR=$(git rev-parse --show-superproject-working-tree 2>/dev/null); then
	if [ -z "${_TEST_ROOT_DIR}" ]; then
		_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
	fi
	python3 -B .github/tools/cioutput.py --log-level debug -l debug "Found ${_TEST_ROOT_DIR} ..." ;
else
	python3 -B .github/tools/cioutput.py --log-level debug -l error --file "${SCRIPT_FILE}" --line ${BASH_LINENO:-0} -t "${FUNCNAME:-$0}" "FAIL: missing valid repository or source structure" >&2
	EXIT_CODE=40
fi

# Get a list of files to check using git ls-tree with filtering
FILES_TO_CHECK=$(git ls-tree -r --full-tree --name-only HEAD -- *.md *.py *.txt **/*.md **/*.txt **/*.py 2>/dev/null || EXIT_CODE=3)

# Enable auto-correction if '--fix' argument is provided
if [[ "$1" == "--fix" ]]; then
	CODESPELL_OPTIONS="--write-changes --interactive 2 ${CODESPELL_OPTIONS}"
	python3 -B .github/tools/cioutput.py --log-level debug -l debug "Auto-correction enabled." ;
fi

# THIS IS THE ACTUAL TEST
# Iterate over files
# shellcheck disable=SC2086
for FILE in $FILES_TO_CHECK; do
	# Part 1: Run codespell
	python3 -B .github/tools/cioutput.py --group "Checking ${FILE}" ;
	python3 -B .github/tools/cioutput.py --log-level debug -l debug "Running codespell tests for typos." ;
	{ codespell $CODESPELL_OPTIONS "${FILE}" || EXIT_CODE=$? ;} 2>/dev/null ; wait ;
	# Part 2: Run specific regression tests for known typos
	python3 -B .github/tools/cioutput.py --log-level debug -l debug "Running regression tests for specific typos." ;
	for TYPO_PAIR in "${SPECIFIC_TYPOS[@]}"; do
		# Split the pair into typo and correction
		TYPO="${TYPO_PAIR%%:*}"
		CORRECTION="${TYPO_PAIR##*:}"
		
		# Check for the specific typo
		if grep -q "$TYPO" "$FILE" 2>/dev/null; then
			python3 -B .github/tools/cioutput.py --log-level debug -l error --file "${FILE}" -t "REGRESSION" "Found typo '$TYPO' (should be '$CORRECTION')" >&2
			EXIT_CODE=2
			
			# Auto-correct if --fix is provided
			if [[ "$1" == "--fix" ]]; then
				if sed -i "s/$TYPO/$CORRECTION/g" "${FILE}" 2>/dev/null; then
					python3 -B .github/tools/cioutput.py --log-level debug -l info --file "$FILE" "Fixed typo '$TYPO' to '$CORRECTION'" ;
				fi
			fi
		fi
		unset TYPO 2>/dev/null || : ;
		unset CORRECTION 2>/dev/null || : ;
	done
	python3 -B .github/tools/cioutput.py --group
done

# cleaning up and reporting
report_summary

cleanup || rm -f "${LOCK_FILE}" 2>/dev/null || : ;

# unset when done
unset _TEST_ROOT_DIR 2>/dev/null || : ;
unset CODESPELL_OPTIONS 2>/dev/null || : ;

wait ;
# shellcheck disable=SC2086
exit ${EXIT_CODE:-255} ;
