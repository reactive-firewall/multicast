---
name: 'Checkout and use Build'
description: 'checks-out the given commit and fetches the build artifact'
author: 'Mr. Walls'
branding:
  icon: 'download-cloud'
  color: 'blue'
inputs:
  sha:
    description: |
      The commit to checkout and fetch build artifacts for. When running this action on github.com,
      the default value is sufficient.
    required: true
    default: ${{ github.server_url == 'https://github.com' && github.sha || 'HEAD' }}
  build-run-id:
    description: |
      The workflow run to fetch build artifacts from. When running this action on github.com,
      the default value is the calling workflow.
    required: true
    default: ${{ github.server_url == 'https://github.com' && github.run_id || '' }}
  path:
    description: |
      Path to setup. When running this action on github.com, the default value
      is sufficient.
    required: true
    default: ${{ github.server_url == 'https://github.com' && github.workspace || '' }}
  token:
    description: |
      The token used to authenticate when fetching Python distributions from
      https://github.com/actions/python-versions. When running this action on github.com,
      the default value is sufficient. When running on GHES, you can pass a personal access
      token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
    required: true
  python-version:
    description: |
      The python version to setup. The default is to use the value of the environment
      variable 'PYTHON_VERSION'.
    default: '3.12'
    required: true
outputs:
  branch-name:
    description: "The name of the branch that was checked-out."
    value: ${{ steps.output_branch_name.outputs.branch-name || '' }}
  sha:
    description: "The SHA of the commit checked-out."
    value: ${{ steps.output_sha.outputs.sha || 'HEAD' }}
  python-version:
    description: "The python version that was used in the run."
    value: ${{ steps.cp313.outputs.python-version || '' }}
  python-path:
    description: "Absolute path to the Python executable installed for the run."
    value: ${{ steps.cp313.outputs.python-path }}
  artifact-name:
    description: "The downloaded artifact-name"
    value: "multicast-build-${{ steps.output_sha.outputs.sha }}.zip"
  artifact-files:
    description: "The downloaded artifact-files."
    value: ${{ steps.output_artifact_files.outputs.files }}

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
        fetch-depth: 0
        submodules: true
        path: ${{ inputs.path }}
        repository: reactive-firewall-org/multicast
        token: ${{ inputs.token }}
    - name: "Checkout Target Commit by SHA"
      shell: bash
      run: |
        printf "%s\n" "::group::target-commit"
        git checkout --force --detach ${{ inputs.sha }} --
        printf "%s\n" "::endgroup::"
      if: ${{ (github.sha != inputs.sha) && success() }}
    - id: output_branch_name
      if: ${{ !cancelled() }}
      shell: bash
      run: |
        printf "branch-name=%s\n" $(git name-rev --name-only HEAD | cut -d~ -f1-1) >> "$GITHUB_OUTPUT"
    - id: output_sha
      shell: bash
      run: printf "sha=%s\n" $(git rev-parse --verify HEAD) >> "$GITHUB_OUTPUT"
    - name: "Setup Python"
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      id: cp313
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'  # caching pip dependencies
      if: ${{ !cancelled() }}
    - run: python -m pip install --upgrade pip
      shell: bash
      if: ${{ !cancelled() && runner.os == 'Windows' }}
    - id: output_python_env
      name: "Python Environment"
      shell: bash
      run: |
        printf "%s\n" "::group::python-env"
        if [[ ${{ runner.os }} != 'Windows' ]] ; then
          printf "python-path=%s\n" "${{ steps.cp313.outputs.python-path }}" >> "$GITHUB_OUTPUT"
          printf "PYTHON=%s\n" "${{ steps.cp313.outputs.python-path }}" >> "$GITHUB_ENV"
        else
          # For Windows: Convert backslashes to forward slashes
          python_path="${{ steps.cp313.outputs.python-path }}"
          printf "python-path=%s\n" "${python_path//\\//}" >> "$GITHUB_OUTPUT"
          printf "PYTHON=%s\n" "${python_path//\\//}" >> "$GITHUB_ENV"
        fi
        printf "python-version=%s\n" "${{ steps.cp313.outputs.python-version }}" >> "$GITHUB_OUTPUT"
        printf "PYTHON_VERSION=%s\n" "${{ steps.cp313.outputs.python-version }}" >> "$GITHUB_ENV"
        printf "%s\n" "::endgroup::"
    - name: "Install Test Dependencies"
      shell: bash
      run: |
        printf "%s\n" "::group::prep-test-reqs"
        make -j1 -f Makefile test-reqs || exit 1
        printf "%s\n" "::endgroup::"
    - id: output_artifact_name
      if: ${{ success() }}
      shell: bash
      run: printf "artifact-name=%s\n" multicast-build-${{ steps.output_sha.outputs.sha }} >> "$GITHUB_OUTPUT"
    - id: fetch_artifact_files
      name: "Fetch Build Files"
      if: ${{ (github.repository == 'reactive-firewall-org/multicast') && success() }}
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        path: ${{ inputs.path }}/dist
        pattern: multicast-build-${{ steps.output_sha.outputs.sha }}
        merge-multiple: true
        repository: reactive-firewall-org/multicast
        github-token: ${{ inputs.token }}
        run-id: ${{ inputs.build-run-id }}
    - name: "Enumerate Fetched Files"
      id: output_artifact_files
      if: ${{ (github.repository == 'reactive-firewall-org/multicast') && success() }}
      env:
        BUILD_MATCH_PATTERN: "dist/multicast-*-*.whl dist/multicast-*.tar.gz"
        SCRIPT_NAME: ".github/actions/checkout-and-rebuild/action.yml"
      shell: bash
      run: |
        FILES=$(git ls-files -oi --exclude-standard -- ${{ env.BUILD_MATCH_PATTERN }} )
        if [ -z "$FILES" ]; then
          printf "::warning file=%s:: %s\n" "${SCRIPT_NAME}" "No Built files found."
          printf "%s\n" "files=" >> "$GITHUB_OUTPUT"
          exit 1
        else
          printf "%s\n" "Built files found:"
          printf "%s\n" "$FILES"
          # Replace line breaks with spaces for GitHub Action Output
          FILES="${FILES//$'\n'/ }"
          printf "%s\n" "files=$FILES" >> "$GITHUB_OUTPUT"
          exit 0
        fi
