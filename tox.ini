[tox]
envlist = py{310,311,312,313,314}, docs, flake
skip_missing_interpreters=True
#ignore_base_python_conflict=True


[base]
allowlist_externals = cp
passenv =
    CI
    CI_*
    CODECOV_ENV
    CODECOV_TOKEN
    CONTINUOUS_INTEGRATION
    COV_CORE_*
    COVERAGE_*
    DEBIAN_FRONTEND
    GH_TOKEN
    GIT_*
    GITHUB_*
    LANG
    LC_ALL
    LC_CTYPE
    MULTICAST_*
    PYTHON*
    TESTS_USE_PYTEST
    TRAVIS
    TRAVIS_*
    VCS_*
    VERSIONER_PYTHON_VERSION
deps =
    -r{toxinidir}{/}requirements.txt
commands_pre =
    cp -vfp {toxinidir}{/}Makefile {env_dir}{/}Makefile
    cp -vfp {toxinidir}{/}.coveragerc {env_dir}{/}.coveragerc
    cp -vfp {toxinidir}{/}requirements.txt {env_dir}{/}requirements.txt
    cp -vfp {toxinidir}{/}pyproject.toml {env_dir}{/}pyproject.toml
    cp -vfp {toxinidir}{/}LICENSE.md {env_dir}{/}LICENSE.md
    cp -vfp {toxinidir}{/}README.md {env_dir}{/}README.md
    cp -vfRp {toxinidir}{/}multicast {env_dir}{/}multicast
    - cp -vfRp {toxinidir}{/}dist {env_dir}{/}dist
    - cp -vfp {toxinidir}{/}MANIFEST.in {env_dir}{/}MANIFEST.in


[testenv:py{39,310,311,312,313,314}]
allowlist_externals =
    {[base]allowlist_externals}
    make
sitepackages = False
skipsdist = True
recreate = True
alwayscopy = True
passenv =
    {[base]passenv}
setenv =
    LC_CTYPE=C.UTF-8
    LC_ALL=en_US.UTF-8
    PYTHON={envpython}
    PYTHONCOERCECLOCALE=UTF-8
    PYTHONUTF8=1
    py39: TRAVIS_PYTHON_VERSION="3.9.6"
    py39: VERSIONER_PYTHON_VERSION="3.9.6"
    py39: PYTHON_VERSION="3.9.6"
    py310: TRAVIS_PYTHON_VERSION="3.10"
    py310: VERSIONER_PYTHON_VERSION="3.10"
    py310: PYTHON_VERSION="3.10"
    py311: TRAVIS_PYTHON_VERSION="3.11"
    py311: VERSIONER_PYTHON_VERSION="3.11"
    py311: PYTHON_VERSION="3.11"
    py312: TRAVIS_PYTHON_VERSION="3.12"
    py312: VERSIONER_PYTHON_VERSION="3.12"
    py312: PYTHON_VERSION="3.12"
    py313: TRAVIS_PYTHON_VERSION="3.13"
    py313: VERSIONER_PYTHON_VERSION="3.13"
    py313: PYTHON_VERSION="3.13"
    py314: TRAVIS_PYTHON_VERSION="3.14"
    py314: VERSIONER_PYTHON_VERSION="3.14"
    py314: PYTHON_VERSION="3.14"
basepython =
    py39: python3.9
    py310: python3.10
    py311: python3.11
    py312: python3.12
    py313: python3.13
    py314: python3.14
deps =
    {[base]deps}
    -r{toxinidir}{/}tests{/}requirements.txt
commands_pre =
    {[base]commands_pre}
    cp -vfRp {toxinidir}{/}tests {env_dir}{/}tests
    cp -vfp {toxinidir}{/}pytest.ini {env_dir}{/}pytest.ini
    cp -vfp {toxinidir}{/}.flake8.ini {env_dir}{/}.flake8.ini
    make -C {env_dir} -f Makefile dist
commands =
    make -C {env_dir} -f Makefile test


[testenv:flake]
description = Style Tests
allowlist_externals =
    {[base]allowlist_externals}
    make
sitepackages = False
skipsdist = False
recreate = True
alwayscopy = True
passenv =
    {[base]passenv}
setenv =
    LC_CTYPE=C.UTF-8
    LC_ALL=en_US.UTF-8
    PYTHON={envpython}
    PYTHONCOERCECLOCALE=UTF-8
    PYTHONUTF8=1
deps =
    {[base]deps}
    flake: -r{toxinidir}{/}tests{/}requirements.txt
commands_pre =
    {[base]commands_pre}
    cp -vfp {toxinidir}{/}.flake8.ini {env_dir}{/}.flake8.ini
    cp -vfRp {toxinidir}{/}tests {env_dir}{/}tests
commands =
    make -C {env_dir} -f Makefile test-style


[testenv:docs]
description = Documentation Tests
allowlist_externals =
    {[base]allowlist_externals}
    make
sitepackages = False
skipsdist = False
recreate = True
alwayscopy = True
passenv =
    {[base]passenv}
setenv =
    LC_CTYPE=C.UTF-8
    LC_ALL=en_US.UTF-8
    PYTHON={envpython}
    PYTHONCOERCECLOCALE=UTF-8
    PYTHONUTF8=1
deps =
    {[base]deps}
    docs: -r{toxinidir}{/}tests{/}requirements.txt
    docs: -r{toxinidir}{/}docs{/}requirements.txt
commands_pre =
    {[base]commands_pre}
    cp -vfRp {toxinidir}{/}docs {env_dir}{/}docs
commands =
    - make -C {env_dir} -f Makefile build-docs


[coverage:run]
concurrency = multiprocessing
parallel = True
sigterm = True
branch = True


[coverage:report]
include = multicast*
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    from . import
    pass
    except ImportError
    except Exception
    except BaseException
    # Don't complain if tests don't hit defensive assertion code:
    except UnicodeDecodeError
    raise AssertionError
    raise NotImplementedError
    raise ImportError
    raise baton
    baton = ImportError
    raise ModuleNotFoundError
    baton.module
    except subprocess.CalledProcessError
    except ..Error
    # don't complain about sys.modules
    sys.modules
    not in sys.modules:
    # Don't complain if non-runnable code isn't run:
    if __name__ .. u'__main__':
    if __name__ .. u"__main__":
    if __name__ .. .__main__.:
    if __sys_path__ not in sys.path:
    if __debug__
    os.abort()
    exit
ignore_errors = True
partial_branches =
    # Have to re-enable the standard pragma rules
    pragma: no branch
    skipcq: PYL-
    finally:
    @
    except unittest.SkipTest
    self.skipTest
    self.fail
    # Don't complain if non-runnable code isn't run:
    if __name__ .. u'__main__':
    if __name__ .. u"__main__":
    if __name__ .. .__main__.:
    if __debug__
    if __sys_path__ not in sys.path:
    # don't complain about sys.modules
    sys.modules
    not in sys.modules:
    if not hasattr(context, '__name__') or not context.__name__:
    if 'os' not in sys.modules:
    if 'os.path' not in sys.modules:
    if 'argparse' not in sys.modules:
    RuntimeError("SHUTDOWN")


[tool:pytest]
addopts = --cache-clear --doctest-glob=multicast/*.py --doctest-modules --cov=multicast --cov-append --cov-report=xml --rootdir=.
#testpaths = tests
pythonpath = multicast tests
python_files = test_*.py
python_classes = *TestSuite
markers =
    mat: minimum acceptance tests
    basic: basic component tests
    doctests: documentation tests
    say: send.py focused tests
    hear: recv.py and hear.py focused tests
    usage: __main__.py and API tests
    build: build and packaging tests
    bootstrap: init/exceptions/env/skt tests
    extra: additional important tests
    coverage: coverage-focused tests
    linting: linting tests
    security: security tests
    fuzzing: fuzzing tests
    slow: smaller sub-set of fuzzing tests
    performance: performance and scalability tests
junit_logging = all


